5.1卷积神经网络（convolutional neural network）是含有卷积层(convolutional layer)的神经网络
5.1.1二维互相关运算
    虽然卷积层得名于卷积（convolution）运算，但我们通常在卷积层中使用更加直观的互相关（cross-correlation）运算。
在二维互相关运算中，卷积窗口从输入数组的最左上方开始，按从左往右、从上往下的顺序，依次在输入数组上滑动。当卷积窗口滑动到某一位置时，窗口中的输入子组
与核数组按元素相乘并求和，得到输出数组中相应位置的元素。
    代码实现：
    import torch
    from torch import nn

   def corr2d(X, K):
       h, w = K.shape
       Y = torch.zeros((X.shape[0] - h + 1,X.shape[1] - w + 1))
       for i in range(Y.shape[0]):
           for j in range(Y.shape[1]):
               Y[i, j] = (X[i: i + h, j:j + w] * K).sum()
       return Y

5.1.2二维卷积层
    二维卷积层将输入和卷积核做互相关运算，并加上一个标量偏差来得到输出。卷积层的模型参数包括卷积核和标量偏差。
    训练模型时，通常先对卷积核随机初始化，再通过不断迭代卷积核和偏差减小loss。
    Use1、 图像中物体边缘检测
    实现：
    X = torch.ones(6, 8)
    X[:, 2:6] = 0
    print(X)
    K = torch.tensor([[1, -1]])
    Y = corr2d(X, K)
    print(Y)
5.1.3 通过数据学习核数组
import torch
from torch import nn

def corr2d(X, K):
    h, w = K.shape
    Y = torch.zeros((X.shape[0] - h + 1,X.shape[1] - w + 1))
    for i in range(Y.shape[0]):
        for j in range(Y.shape[1]):
            Y[i, j] = (X[i: i + h, j:j + w] * K).sum()
    return Y
class Conv2D(nn.Module):
    def __init__(self, kernel_size):
        super(Conv2D, self).__init__()
        self.weight = nn.Parameter(torch.randn(kernel_size))
        self.bias = nn.Parameter(torch.randn(1))
        
    def forward(self, x):
        return corr2d(x, self.weight) + self.bias
X = torch.ones(6, 8)
X[:, 2:6] = 0
K = torch.tensor([[1, -1]])
Y = corr2d(X, K)
#构造一个核数组形状是（1，2）的二维卷积层 
conv2d  = Conv2D(kernel_size=(1, 2))
step = 20
lr = 0.01
for i in range(step):
    Y_hat = conv2d(X)
    l = ((Y_hat - Y) ** 2).sum()
    l.backward()
    
    #梯度下降
    conv2d.weight.data -= lr * conv2d.weight.grad
    conv2d.bias.data -= lr * conv2d.bias.grad
    
    #梯度清0
    conv2d.weight.grad.fill_(0)
    conv2d.bias.grad.fill_(0)
    if ( i + 1) % 5 == 0:
        print('Step %d, loss %.3f' % (i + 1, l.item()))
print("weight: ", conv2d.weight.data)
print("bias: ", conv2d.bias.data)
    
    

